/ This template is i18n-ready: if you don't use i18n, then you can replace the pagy_t
/ calls with the actual strings ("&lsaquo; Prev", "Next &rsaquo;", "&hellip;").

/ This template uses the pagy_link_proc helper for high speed (+20x) and low memory (-12x).
/ Usage: link.call(page_number[, label[,extra_attributes_string]])

- link = pagy_link_proc(pagy)

nav.pagination role="navigation" aria-label="pager"

  ul.pagination

    - if pagy.prev
      li.page-item.prev == link.call(pagy.prev, pagy_t('pagy.nav.prev'), 'class="page-link" aria-label="previous"')
    - else
      li.page-item.prev.disabled
        a.page-link href="#" == pagy_t('pagy.nav.prev')

    - pagy.series.each do |item| # series example: [1, :gap, 7, 8, "9", 10, 11, :gap, 36]
      - case item

        - when Integer # page link
          li.page-item == link.call(item, item, 'class="page-link"')

        - when String # current page
          li.page-item.active == link.call(item, item, 'class="page-link"')

        - when :gap # page gap
          li.page-item.disabled.gap
            a.page-link href="#" == pagy_t('pagy.nav.gap')

    - if pagy.next
      li.page-item.next == link.call(pagy.next, pagy_t('pagy.nav.next'), 'class="page-link" aria-label="next"')
    - else
      li.page-item.next.disabled
        a.page-link href="#" == pagy_t('pagy.nav.next')
