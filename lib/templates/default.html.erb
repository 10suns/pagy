<%#
  This template is i18n-ready: if you don't use i18n, then you can replace the pagy_t
  calls with the actual strings ("&lsaquo; Prev", "Next &rsaquo;", "&hellip;").

  This template uses the pagy_link_proc helper for high speed (+20x) and low memory (-12x).
  Usage: link.call(page_number[, label[,extra_attributes_string]])
-%>
<% link = pagy_link_proc(pagy) -%>
<nav aria-label="pager" class="pagination" role="navigation">
  <% if pagy.prev -%>
    <span class="page prev"><%== link.call(pagy.prev, pagy_t('pagy.nav.prev'), 'aria-label="previous"') %></span>
  <% else -%>
    <span class="page prev disabled"><%== pagy_t('pagy.nav.prev') %></span>
  <% end -%>
  <% pagy.series.each do |item| # series example: [1, :gap, 7, 8, "9", 10, 11, :gap, 36] -%>
    <% case item
       when Integer      # page link -%>
        <span class="page"><%== link.call(item) %></span>
      <% when String     # current page -%>
        <span class="page current"><%= item %></span>
      <% when :gap       # page gap -%>
        <span class="page gap"><%== pagy_t('pagy.nav.gap') %></span>
    <% end -%>
  <% end -%>
  <% if pagy.next -%>
    <span class="page next"><%== link.call(pagy.next, pagy_t('pagy.nav.next'), 'aria-label="next"') %></span>
  <% else -%>
    <span class="page next disabled"><%== pagy_t('pagy.nav.next') %></span>
  <% end -%>
</nav>
